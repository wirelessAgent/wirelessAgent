class Solution { //T:O(n) S:O(1)
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
// Example - [[1,3],[6,9]]: Here intervals[0] is [1,3], intervals[1] is [6,9]. Now intervals[0][0] means 1 and intervals[0][1] means 3. intervals[1][0] is 6 and likewise. Remember this.
         
        int n = intervals.size(), i = 0;
        vector<vector<int>> res;

        // Case 1: No overlapping 
        // Compare ending of each interval to starting of newInterval
        while (i < n && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i]);
            i++;
        } //If this cond doesn't satisfy, there is an overlap
        //Same i goes on, so T is O(n)
        // Case 2: Overlapping and merging
        // Here compare the opposite, ending of newInterval with starting of each interval, >=
        while (i < n && newInterval[1] >= intervals[i][0]) {
           
            newInterval[0] = min(newInterval[0], intervals[i][0]); //Min here
            newInterval[1] = max(newInterval[1], intervals[i][1]); //Max here
            i++;
        }
        res.push_back(newInterval); //In overlap case, push after while when it merges all

        // Case 3: no overlapping of intervals after newinterval is merged
        while (i < n) {
            res.push_back(intervals[i]);
            i++;
        }
        return res;

    }
};

#if 0
/*   
1st while
cout << " i " << i << " intervals[i][1]  " << intervals[i][1] << " newInterval[0]  " << newInterval[0] << " intervals[i] ?? "  << endl;
2nd while
cout << " i " << i <<  " intervals[i][0]  " << intervals[i][0] << " intervals[i][1]  " << intervals[i][1] << endl;
cout << " newInterval[0]  " << newInterval[0] << " newInterval[1]  " << newInterval[1] << endl;
cout << " newInterval[0]  " << newInterval[0] << " newInterval[1]  " << newInterval[1] << endl;
*/
#endif
